See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

SpotBugs:     FAILED (3 warnings)
PMD:          FAILED (1 warning)
Checkstyle:   FAILED (0 errors, 13 warnings)

Correctness:  24/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 77.33%
[Compilation: 5%, API: 5%, SpotBugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.8K Jan 13 22:39 KdTree.java
4.7K Jan 13 22:39 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At KdTree.java:[lines 190-192]
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At PointSET.java:[lines 81-83]
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'isEmpty()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At PointSET.java:[line 164]
SpotBugs ends with 3 warnings.


================================================================


% pmd .
*-----------------------------------------------------------
PointSET.java:13: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:61:9: Use the primitive type 'double' instead of the wrapper type 'Double'. [Wrapper]
[WARN] KdTree.java:99:9: Use the primitive type 'double' instead of the wrapper type 'Double'. [Wrapper]
[WARN] KdTree.java:150:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:55:74: ';' is followed by whitespace. [EmptyForIteratorPad]
[WARN] PointSET.java:110:74: ';' is followed by whitespace. [EmptyForIteratorPad]
[WARN] PointSET.java:130:74: ';' is followed by whitespace. [EmptyForIteratorPad]
[WARN] PointSET.java:141:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 7 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:11:1: There is no need to define nested classes in this program. [Design]
[WARN] PointSET.java:68:5: There is no need to define nested classes in this program. [Design]
[WARN] PointSET.java:68:33: Using interface inheritance suggests poor design in this program. [Design]
[WARN] PointSET.java:69:33: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:177:33: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:178:33: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:223)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1759)
    TestKdTree.main(TestKdTree.java:1974)

  * input1.txt
  * input5.txt

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.7, 0.2] x [0.0, 0.4]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1761)
    TestKdTree.main(TestKdTree.java:1974)

  * input10.txt

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.372, 0.144] x [0.0, 0.577]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1762)
    TestKdTree.main(TestKdTree.java:1974)

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.75, 0.0] x [0.375, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:235)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1771)
    TestKdTree.main(TestKdTree.java:1977)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.4375, 0.0625] x [0.375, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1772)
    TestKdTree.main(TestKdTree.java:1977)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.375, 0.125] x [0.0, 0.9375]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1773)
    TestKdTree.main(TestKdTree.java:1977)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0, 0.296875] x [1.0, 0.03125]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:240)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1774)
    TestKdTree.main(TestKdTree.java:1977)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.60162353515625, 0.0769500732421875] x [0.319580078125, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5b(TestKdTree.java:1775)
    TestKdTree.main(TestKdTree.java:1977)

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.5, 0.0] x [0.25, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1783)
    TestKdTree.main(TestKdTree.java:1980)

  * 15 random distinct points in a 8-by-8 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.375, 0.25] x [0.5, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1784)
    TestKdTree.main(TestKdTree.java:1980)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.0625, 0.0] x [0.0625, 0.9375]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1785)
    TestKdTree.main(TestKdTree.java:1980)

  * 100 random distinct points in a 32-by-32 grid

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0, 0.5] x [0.3125, 0.15625]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:239)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1786)
    TestKdTree.main(TestKdTree.java:1980)

  * 10000 random distinct points in a 65536-by-65536 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.0078582763671875, 0.0023193359375] x [0.0, 0.8885955810546875]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5c(TestKdTree.java:1787)
    TestKdTree.main(TestKdTree.java:1980)

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.5, 0.25] x [0.1875, 0.8125]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1795)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 128-by-128 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.140625, 0.09375] x [0.1015625, 0.5546875]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1796)
    TestKdTree.main(TestKdTree.java:1983)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.318359375, 0.2841796875] x [0.0, 0.75390625]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:276)
    TestKdTree.test5d(TestKdTree.java:1797)
    TestKdTree.main(TestKdTree.java:1983)

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.7, 0.2] x [0.4, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:361)
    TestKdTree.test6a(TestKdTree.java:1806)
    TestKdTree.main(TestKdTree.java:1986)

  * input10.txt

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.372, 0.144] x [0.577, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:361)
    TestKdTree.test6a(TestKdTree.java:1807)
    TestKdTree.main(TestKdTree.java:1986)

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.5, 0.625)
    - reference nearest() = (0.5, 0.625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.375, 0.75)
    - sequence of points inserted: 
      A  0.625 0.875
      B  0.5 0.625
      C  0.25 1.0
      D  0.125 0.25
      E  0.875 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.75, 0.0] x [0.0, 0.3125]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:235)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1818)
    TestKdTree.main(TestKdTree.java:1989)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0, 0.40625] x [0.21875, 0.1875]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:239)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1819)
    TestKdTree.main(TestKdTree.java:1989)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0, 0.0625] x [0.46875, 0.0625]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:239)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1820)
    TestKdTree.main(TestKdTree.java:1989)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.3671875, 0.0390625] x [0.0, 0.1796875]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1821)
    TestKdTree.main(TestKdTree.java:1989)

  * 1000 random non-degenerate points in a 2048-by-2048 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.6904296875, 0.2470703125] x [0.8125, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearestTraversal(TestKdTree.java:402)
    TestKdTree.checkNearestTraversal(TestKdTree.java:366)
    TestKdTree.test6b(TestKdTree.java:1822)
    TestKdTree.main(TestKdTree.java:1989)

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:223)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:271)
    TestKdTree.test7(TestKdTree.java:1832)
    TestKdTree.main(TestKdTree.java:1992)

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.375, 0.25] x [0.4375, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9a(TestKdTree.java:1853)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.375, 0.875)
           st.contains((0.4375, 0.5))  ==>  false
           st.range([0.4375, 0.875] x [0.125, 0.375])  ==>  empty
           st.insert(0.9375, 0.6875)
           st.size()  ==>  2
           st.insert(0.0, 0.4375)
           st.size()  ==>  3
           st.nearest((0.3125, 1.0))   ==>  (0.375, 0.875)
           st.size()  ==>  3
           st.contains((0.25, 0.0625))  ==>  false
           st.insert(0.75, 0.0)
           st.insert(0.25, 0.1875)
           st.isEmpty()  ==>  false
           st.nearest((0.5625, 0.5))

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 15 of 20000
    - student   nearest()  = (0.9140625, 0.015625)
    - reference nearest()  = (0.734375, 0.125)
    - student   distanceSquaredTo() = 0.0928955078125
    - reference distanceSquaredTo() = 0.06768798828125
    - sequence of operations was:
           st.insert(0.21875, 0.953125)
           st.range([0.171875, 0.6328125] x [0.078125, 0.796875])  ==>  empty
           st.contains((0.1015625, 0.2890625))  ==>  false
           st.insert(0.9140625, 0.015625)
           st.contains((0.5, 0.453125))  ==>  false
           st.contains((0.328125, 0.3203125))  ==>  false
           st.insert(0.1015625, 0.1640625)
           st.insert(0.734375, 0.125)
           st.nearest((0.546875, 0.8828125))   ==>  (0.21875, 0.953125)
           st.insert(0.4296875, 0.5234375)
           st.contains((0.75, 0.0546875))  ==>  false
           st.contains((0.96875, 0.203125))  ==>  false
           st.size()  ==>  5
           st.range([0.609375, 0.6171875] x [0.078125, 0.7890625])  ==>  empty
           st.nearest((0.90625, 0.3203125))   ==>  (0.9140625, 0.015625)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.78125, 0.326171875] x [0.251953125, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:235)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9a(TestKdTree.java:1855)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.326171875, 0.009765625)
           st.nearest((0.349609375, 0.8466796875))   ==>  (0.326171875, 0.009765625)
           st.size()  ==>  1
           st.range([0.3095703125, 0.6318359375] x [0.015625, 0.935546875])  ==>  empty
           st.range([0.3046875, 0.947265625] x [0.1748046875, 0.2744140625])  ==>  empty
           st.contains((0.39453125, 0.6845703125))  ==>  false
           st.nearest((0.25, 0.443359375))   ==>  (0.326171875, 0.009765625)
           st.isEmpty()  ==>  false
           st.isEmpty()  ==>  false
           st.nearest((0.54296875, 0.0908203125))   ==>  (0.326171875, 0.009765625)
           st.insert(0.474609375, 0.251953125)
           st.range([0.06640625, 0.22265625] x [0.634765625, 0.6875])  ==>  empty
           st.nearest((0.9765625, 0.0439453125))   ==>  (0.474609375, 0.251953125)
           st.range([0.361328125, 0.4130859375] x [0.6298828125, 0.9951171875])  ==>  empty
           st.contains((0.90625, 0.53125))  ==>  false
           st.insert(0.78125, 0.2099609375)
           st.range([0.2900390625, 0.380859375] x [0.0654296875, 0.6181640625])  ==>  empty
           st.range([0.6474609375, 0.806640625] x [0.146484375, 0.2841796875])  ==>  G 
           st.insert(0.6083984375, 0.130859375)
           st.contains((0.0546875, 0.7490234375))  ==>  false
           st.contains((0.0185546875, 0.5244140625))  ==>  false
           st.contains((0.1044921875, 0.3798828125))  ==>  false
           st.nearest((0.625, 0.3974609375))

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.439208984375, 0.4619140625)
    - reference nearest()  = (0.919921875, 0.70751953125)
    - student   distanceSquaredTo() = 0.087388768792152
    - reference distanceSquaredTo() = 0.060342326760292
    - sequence of operations was:
           st.insert(0.2625732421875, 0.7210693359375)
           st.contains((0.4736328125, 0.306884765625))  ==>  false
           st.range([0.7305908203125, 0.809326171875] x [0.02880859375, 0.6427001953125])  ==>  empty
           st.insert(0.439208984375, 0.4619140625)
           st.contains((0.345703125, 0.9771728515625))  ==>  false
           st.contains((0.204345703125, 0.377197265625))  ==>  false
           st.insert(0.919921875, 0.70751953125)
           st.contains((0.3341064453125, 0.4810791015625))  ==>  false
           st.range([0.0206298828125, 0.0865478515625] x [0.1058349609375, 0.9813232421875])  ==>  empty
           st.contains((0.00634765625, 0.8868408203125))  ==>  false
           st.range([0.543212890625, 0.7242431640625] x [0.3056640625, 0.4114990234375])  ==>  empty
           st.contains((0.1920166015625, 0.2767333984375))  ==>  false
           st.contains((0.5010986328125, 0.4501953125))  ==>  false
           st.nearest((0.10498046875, 0.9073486328125))   ==>  (0.2625732421875, 0.7210693359375)
           st.nearest((0.3958740234375, 0.913818359375))   ==>  (0.2625732421875, 0.7210693359375)
           st.contains((0.4014892578125, 0.8475341796875))  ==>  false
           st.contains((0.817626953125, 0.8408203125))  ==>  false
           st.contains((0.615966796875, 0.9683837890625))  ==>  false
           st.insert(0.063232421875, 0.8350830078125)
           st.nearest((0.7108154296875, 0.57861328125))   ==>  (0.439208984375, 0.4619140625)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.834930419921875, 0.6394500732421875] x [0.0, 0.6475677490234375]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9a(TestKdTree.java:1857)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.insert(0.834930419921875, 0.3451995849609375)
           st.range([0.389862060546875, 0.954498291015625] x [0.02520751953125, 0.4293670654296875])  ==>  V 
           st.contains((0.0288238525390625, 0.3837890625))  ==>  false
           st.insert(0.0691986083984375, 0.6475677490234375)
           st.size()  ==>  2
           st.range([0.13739013671875, 0.764678955078125] x [0.2702484130859375, 0.422607421875])  ==>  empty
           st.range([0.7890167236328125, 0.9257659912109375] x [0.013031005859375, 0.140777587890625])  ==>  empty
           st.nearest((0.0204925537109375, 0.58056640625))   ==>  (0.0691986083984375, 0.6475677490234375)
           st.nearest((0.8858489990234375, 0.2875518798828125))   ==>  (0.834930419921875, 0.3451995849609375)
           st.nearest((0.0917510986328125, 0.0838623046875))   ==>  (0.0691986083984375, 0.6475677490234375)
           st.insert(0.4271087646484375, 0.8467864990234375)
           st.insert(0.6394500732421875, 0.5185394287109375)
           st.nearest((0.214385986328125, 0.4423370361328125))   ==>  (0.0691986083984375, 0.6475677490234375)
           st.contains((0.271820068359375, 0.32305908203125))  ==>  false
           st.range([0.8513336181640625, 0.883697509765625] x [0.0135498046875, 0.7246551513671875])  ==>  empty
           st.contains((0.5849609375, 0.713409423828125))  ==>  false
           st.range([0.13348388671875, 0.259521484375] x [0.273712158203125, 0.3883514404296875])  ==>  empty
           st.nearest((0.994232177734375, 0.2281036376953125))

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 22 of 20000
    - student   nearest()  = (0.6875, 0.3125)
    - reference nearest()  = (0.9375, 0.5625)
    - student   distanceSquaredTo() = 0.16015625
    - reference distanceSquaredTo() = 0.00390625
    - sequence of operations was:
           st.insert(0.4375, 0.875)
           st.nearest((0.8125, 1.0))   ==>  (0.4375, 0.875)
           st.contains((0.75, 0.5))  ==>  false
           st.nearest((0.875, 0.0625))   ==>  (0.4375, 0.875)
           st.range([0.25, 0.4375] x [0.0625, 0.5])  ==>  empty
           st.range([0.3125, 0.375] x [0.0625, 0.3125])  ==>  empty
           st.nearest((0.25, 0.875))   ==>  (0.4375, 0.875)
           st.insert(0.25, 0.875)
           st.range([0.75, 0.875] x [0.0625, 0.625])  ==>  empty
           st.nearest((0.0, 0.625))   ==>  (0.25, 0.875)
           st.nearest((0.3125, 0.625))   ==>  (0.25, 0.875)
           st.contains((0.0625, 0.125))  ==>  false
           st.insert(0.6875, 0.3125)
           st.range([0.0625, 0.5] x [0.0, 0.5625])  ==>  empty
           st.contains((0.5625, 0.9375))  ==>  false
           st.contains((0.9375, 0.9375))  ==>  false
           st.insert(0.875, 0.9375)
           st.range([0.5625, 0.625] x [0.1875, 0.75])  ==>  empty
           st.insert(0.9375, 0.5625)
           st.range([0.3125, 0.75] x [0.25, 0.625])  ==>  V 
           st.contains((0.75, 0.625))  ==>  false
           st.nearest((1.0, 0.5625))   ==>  (0.6875, 0.3125)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 30 of 20000
    - student   nearest()  = (0.953125, 0.6875)
    - reference nearest()  = (0.8515625, 0.6875)
    - student   distanceSquaredTo() = 0.06329345703125
    - reference distanceSquaredTo() = 0.027587890625

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.525390625, 0.0234375] x [0.0, 0.7587890625]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9b(TestKdTree.java:1869)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.525390625, 0.2421875)
           st.size()  ==>  1
           st.isEmpty()  ==>  false
           st.range([0.1162109375, 0.361328125] x [0.4384765625, 0.8359375])  ==>  empty
           st.range([0.0693359375, 0.7978515625] x [0.4482421875, 0.76953125])  ==>  empty
           st.nearest((0.466796875, 0.5361328125))   ==>  (0.525390625, 0.2421875)
           st.range([0.03125, 0.533203125] x [0.5947265625, 0.6171875])  ==>  empty
           st.range([0.1279296875, 0.5439453125] x [0.6865234375, 0.9521484375])  ==>  empty
           st.contains((0.8349609375, 0.5361328125))  ==>  false
           st.insert(0.3603515625, 0.7587890625)
           st.isEmpty()  ==>  false
           st.insert(0.0234375, 0.6875)
           st.range([0.1064453125, 0.4677734375] x [0.0830078125, 0.1845703125])  ==>  empty
           st.range([0.3984375, 0.4716796875] x [0.3505859375, 0.6708984375])  ==>  empty
           st.insert(0.2177734375, 0.3095703125)
           st.size()  ==>  4
           st.nearest((0.666015625, 0.58203125))

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.4075927734375, 0.090087890625] x [0.4251708984375, 0.5882568359375]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:235)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9b(TestKdTree.java:1870)
    TestKdTree.main(TestKdTree.java:2001)


  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.6043701171875, 0.283905029296875] x [0.6246185302734375, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9b(TestKdTree.java:1871)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.insert(0.6043701171875, 0.89654541015625)
           st.range([0.046234130859375, 0.3552703857421875] x [0.687835693359375, 0.802764892578125])  ==>  empty
           st.insert(0.249053955078125, 0.6246185302734375)
           st.nearest((0.886962890625, 0.64910888671875))   ==>  (0.6043701171875, 0.89654541015625)
           st.size()  ==>  2
           st.range([0.5057830810546875, 0.946075439453125] x [0.4246063232421875, 0.666595458984375])  ==>  empty
           st.range([0.62310791015625, 0.91546630859375] x [0.1466064453125, 0.507354736328125])  ==>  empty
           st.range([0.0537872314453125, 0.736968994140625] x [0.3271484375, 0.8947601318359375])  ==>  C 
           st.contains((0.9210357666015625, 0.157745361328125))  ==>  false
           st.nearest((0.3284759521484375, 0.5979156494140625))   ==>  (0.249053955078125, 0.6246185302734375)
           st.nearest((0.2202911376953125, 0.83612060546875))   ==>  (0.249053955078125, 0.6246185302734375)
           st.contains((0.565460205078125, 0.87139892578125))  ==>  false
           st.insert(0.283905029296875, 0.0781097412109375)
           st.contains((0.0883941650390625, 0.1734619140625))  ==>  false
           st.contains((0.3345947265625, 0.6128082275390625))  ==>  false
           st.insert(0.7939453125, 0.25408935546875)
           st.range([0.2334747314453125, 0.65191650390625] x [0.40130615234375, 0.8878173828125])  ==>  C 
           st.nearest((0.0629119873046875, 0.340362548828125))   ==>  (0.249053955078125, 0.6246185302734375)
           st.nearest((0.615570068359375, 0.6660614013671875))

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [1.0, 0.0] x [1.0, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9c(TestKdTree.java:1880)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.insert(0.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  G B 
           st.contains((1.0, 0.0))  ==>  true
           st.contains((1.0, 0.0))  ==>  true
           st.insert(0.0, 0.0)
           st.insert(0.0, 1.0)
           st.contains((0.0, 0.0))  ==>  true
           st.nearest((1.0, 1.0))

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.4375, 0.25] x [0.0, 0.25]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9c(TestKdTree.java:1881)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.4375, 0.25)
           st.insert(0.6875, 0.9375)
           st.isEmpty()  ==>  false
           st.size()  ==>  2
           st.contains((0.0625, 1.0))  ==>  false
           st.insert(0.375, 0.25)
           st.range([0.0625, 0.25] x [0.375, 1.0])  ==>  empty
           st.contains((0.6875, 0.5))  ==>  false
           st.insert(0.25, 0.5)
           st.range([0.0625, 0.8125] x [0.0625, 0.25])  ==>  V Z 
           st.contains((1.0, 0.8125))  ==>  false
           st.insert(0.875, 0.8125)
           st.contains((0.875, 0.75))  ==>  false
           st.contains((0.9375, 0.625))  ==>  false
           st.isEmpty()  ==>  false
           st.insert(0.9375, 0.8125)
           st.range([0.1875, 0.375] x [0.375, 0.9375])  ==>  Y 
           st.insert(0.1875, 0.3125)
           st.contains((0.5625, 0.6875))  ==>  false
           st.insert(0.9375, 0.9375)
           st.nearest((0.9375, 0.6875))

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0, 0.828125] x [0.2421875, 0.03125]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:239)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9c(TestKdTree.java:1882)
    TestKdTree.main(TestKdTree.java:2004)


  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9 of 20000
    - student   nearest()  = (0.6962890625, 0.064453125)
    - reference nearest()  = (0.6416015625, 0.86328125)
    - student   distanceSquaredTo() = 0.718724250793457
    - reference distanceSquaredTo() = 0.084366798400879
    - sequence of operations was:
           st.insert(0.03125, 0.890625)
           st.range([0.2568359375, 0.59765625] x [0.73828125, 0.8876953125])  ==>  empty
           st.insert(0.6962890625, 0.064453125)
           st.range([0.671875, 0.7724609375] x [0.03515625, 0.56640625])  ==>  F 
           st.range([0.06640625, 0.298828125] x [0.3134765625, 0.9716796875])  ==>  empty
           st.insert(0.6416015625, 0.86328125)
           st.isEmpty()  ==>  false
           st.range([0.6943359375, 0.9716796875] x [0.0625, 0.5712890625])  ==>  F 
           st.nearest((0.931640625, 0.87890625))   ==>  (0.6962890625, 0.064453125)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.8194580078125, 0.0985107421875] x [0.0, 0.8043212890625]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9c(TestKdTree.java:1884)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.8194580078125, 0.60888671875)
           st.insert(0.591796875, 0.8043212890625)
           st.insert(0.3966064453125, 0.8563232421875)
           st.contains((0.57861328125, 0.11376953125))  ==>  false
           st.contains((0.194580078125, 0.4488525390625))  ==>  false
           st.insert(0.9632568359375, 0.486328125)
           st.contains((0.3458251953125, 0.5487060546875))  ==>  false
           st.range([0.30517578125, 0.9298095703125] x [0.0223388671875, 0.1690673828125])  ==>  empty
           st.insert(0.9786376953125, 0.84912109375)
           st.insert(0.912841796875, 0.72314453125)
           st.nearest((0.69140625, 0.2542724609375))   ==>  (0.9632568359375, 0.486328125)
           st.range([0.154541015625, 0.388916015625] x [0.5631103515625, 0.6944580078125])  ==>  empty
           st.contains((0.01708984375, 0.35205078125))  ==>  false
           st.insert(0.0985107421875, 0.3773193359375)
           st.contains((0.19287109375, 0.687255859375))  ==>  false
           st.range([0.2747802734375, 0.277099609375] x [0.79150390625, 0.803955078125])  ==>  empty
           st.range([0.4232177734375, 0.891357421875] x [0.3192138671875, 0.9251708984375])  ==>  S B 
           st.insert(0.87646484375, 0.2523193359375)
           st.range([2.44140625E-4, 0.6094970703125] x [0.4158935546875, 0.585205078125])  ==>  empty
           st.contains((0.017333984375, 0.322265625))  ==>  false
           st.insert(0.2239990234375, 0.65966796875)
           st.insert(0.8204345703125, 0.9525146484375)
           st.nearest((0.835693359375, 0.2718505859375))

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.3014678955078125, 0.210601806640625] x [0.756072998046875, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkAll(TestKdTree.java:957)
    TestKdTree.test9c(TestKdTree.java:1885)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.insert(0.3014678955078125, 0.62762451171875)
           st.isEmpty()  ==>  false
           st.nearest((0.7393035888671875, 0.230743408203125))   ==>  (0.3014678955078125, 0.62762451171875)
           st.size()  ==>  1
           st.range([0.1252288818359375, 0.5657958984375] x [0.06427001953125, 0.9654083251953125])  ==>  M 
           st.insert(0.6887054443359375, 0.722747802734375)
           st.insert(0.15399169921875, 0.756072998046875)
           st.nearest((0.7480621337890625, 0.3526458740234375))   ==>  (0.6887054443359375, 0.722747802734375)
           st.insert(0.99346923828125, 0.19024658203125)
           st.insert(0.93017578125, 0.7473297119140625)
           st.insert(0.3503875732421875, 0.982879638671875)
           st.insert(0.472686767578125, 0.2820892333984375)
           st.contains((0.641082763671875, 0.487091064453125))  ==>  false
           st.insert(0.210601806640625, 0.773681640625)
           st.nearest((0.6823577880859375, 0.6057586669921875))

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0, 0.75] x [1.0, 0.25]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:240)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1359)
    TestKdTree.test10(TestKdTree.java:1896)
    TestKdTree.main(TestKdTree.java:2007)

  * 20 random general points in a 8-by-8 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.875, 0.125] x [0.25, 1.0]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:235)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:260)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1339)
    TestKdTree.test10(TestKdTree.java:1897)
    TestKdTree.main(TestKdTree.java:2007)

    - sequence of operations was:
           KdTree st1 = new KdTree();
           st1.insert((0.125, 1.0))
           st1.insert((0.5, 0.25))
           st1.insert((0.875, 0.0))
           st1.insert((0.25, 0.125))
           st1.insert((0.875, 0.0))
           st1.insert((0.375, 0.0))
           st1.insert((0.25, 0.25))
           st1.insert((0.875, 0.75))
           st1.insert((0.25, 0.0))
           st1.insert((0.375, 0.125))
           st1.insert((0.25, 0.875))
           st2.insert((0.375, 0.375))
           st2.insert((1.0, 0.0))
           st2.insert((0.25, 0.5))
           st2.insert((0.375, 0.5))
           st2.insert((0.625, 0.875))
           st2.insert((0.0, 0.5))
           st2.insert((1.0, 0.375))
           st2.insert((0.875, 1.0))
           st2.insert((0.75, 0.5))
           st2.nearest((0.375, 0.375))  ==>  (0.375, 0.375)
           st1.range([0.875, 0.875] x [0.375, 0.5])  ==>  empty
           st1.nearest((0.375, 0.375))
  * 100 random general points in a 128-by-128 grid

    java.lang.IllegalArgumentException: invalid RectHV because xmax < xmin: [0.3828125, 0.25] x [0.640625, 0.9375]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:73)
    KdTree.nearest(KdTree.java:234)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    ...
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1359)
    TestKdTree.test10(TestKdTree.java:1898)
    TestKdTree.main(TestKdTree.java:2007)

  * 1000 random general points in a 65536-by-65536 grid

    java.lang.IllegalArgumentException: invalid RectHV because ymax < ymin: [0.0118408203125, 0.203399658203125] x [0.447998046875, 0.0504608154296875]

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:76)
    KdTree.nearest(KdTree.java:239)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:252)
    KdTree.nearest(KdTree.java:280)
    TestKdTree.checkImmutabilityTwoKdTreeObjects(TestKdTree.java:1339)
    TestKdTree.test10(TestKdTree.java:1899)
    TestKdTree.main(TestKdTree.java:2007)

==> FAILED


Total: 16/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          248                264
=> passed        2          344                360
=> passed        5          632                648
=> passed       10         1112               1128
=> passed       25         2552               2568
=> passed      100         9752               9768
=> passed      400        38552              38568
=> passed      800        76952              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 152.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          128                160
=> passed        2          216                288
=> passed        5          480                672
=> passed       10          920               1312
=> passed       25         2240               3232
=> passed      100         8840              12832
=> passed      400        35240      

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an excepti
