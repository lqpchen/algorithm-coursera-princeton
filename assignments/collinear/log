ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

SpotBugs:     FAILED (1 warning)
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  31/41 tests passed
Memory:       1/1 tests passed
Timing:       23/41 tests passed

Aggregate score: 76.59%
[Compilation: 5%, API: 5%, SpotBugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.2K Jan  8 22:08 BruteCollinearPoints.java
4.2K Jan  8 22:08 FastCollinearPoints.java
3.6K Jan  8 22:08 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M P NAB_NEEDLESS_BOX_TO_UNBOX NAB: Method Point.slopeTo(Point) creates Boxed primitive from primitive only to get primitive value  At Point.java:[line 54]
SpotBugs ends with 1 warning.


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:11: Can you replace the instance (or static) variable 'points' with a local variable? [SingularField]
FastCollinearPoints.java:13: Can you replace the instance (or static) variable 'points' with a local variable? [SingularField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:19:27: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:33:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] FastCollinearPoints.java:21:27: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:35:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] FastCollinearPoints.java:69:110: '{' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:54:36: The numeric literal '16' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:57:36: The numeric literal '16' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    BruteCollinearPoints.addSegment(BruteCollinearPoints.java:19)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:71)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:166)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:181)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:736)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    BruteCollinearPoints.addSegment(BruteCollinearPoints.java:19)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:71)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:166)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:245)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:742)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 15/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:184)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:798)

  * filename = horizontal50.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:185)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:798)

  * filename = horizontal75.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:186)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:798)

  * filename = horizontal100.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:187)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:798)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:251)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:804)

  * filename = vertical50.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:252)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:804)

  * filename = vertical75.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:253)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:804)

  * filename = vertical100.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:254)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:804)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:314)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:816)

  * filename = input300.txt
  * filename = inarow.txt
==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:323)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

  * filename = rs1423.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:325)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:377)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:397)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:831)

    - failed on trial 1 of 100

  * 50 random line segments

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:377)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:398)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:831)

    - failed on trial 1 of 15

  * 100 random line segments

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.noVerticalOrHorizontalSegments(TestFastCollinearPoints.java:377)
    TestFastCollinearPoints.test9(TestFastCollinearPoints.java:399)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:831)

    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:411)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:431)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:834)

    - failed on trial 1 of 100

  * 50 random line segments

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:411)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:432)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:834)

    - failed on trial 1 of 15

  * 100 random line segments

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.arbitrarySegments(TestFastCollinearPoints.java:411)
    TestFastCollinearPoints.test10(TestFastCollinearPoints.java:433)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:834)

    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:444)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:837)

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:444)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:465)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:837)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:444)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:466)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:837)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:473)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:481)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:840)

  * 20-by-20 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:473)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:482)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:840)

  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:473)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:485)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:840)

  * 15-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:473)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:486)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:840)

  * 25-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:473)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:487)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:840)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 13/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                  120         
=> passed    32   0.00      107880           0         107880                  496         
=> passed    64   0.03     1906128           0        1906128                 2016         
=> passed   128   0.08    32004000           0       32004000                 8128         
=> passed   256   1.53   524377920           0      524377920                32640         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                  144         
=> passed    32   0.00      107880           0         107880                  544         
=> passed    64   0.02     1906128           0        1906128                 2112         

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    BruteCollinearPoints.addSegment(BruteCollinearPoints.java:19)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:71)
    TimeBruteCollinearPoints.timingTest(TimeBruteCollinearPoints.java:93)
    TimeBruteCollinearPoints.time(TimeBruteCollinearPoints.java:165)
    TimeBruteCollinearPoints.timeArbitrarySegments(TimeBruteCollinearPoints.java:150)
    TimeBruteCollinearPoints.main(TimeBruteCollinearPoints.java:204)

Total: 8/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       15872       18805          53482                 2016         
=> passed   128   0.01       64512       88517         241546                 8128         
=> passed   256   0.02      260096      414104        1088304                32640         
=> passed   512   0.13     1044480     1901891        4848262               130816         
=> passed  1024   0.35     4186112     8508970       21204052               523776         
=> passed  2048   0.81    16760832    37904879       92570590              2096128         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (92570590 / 21204052) = 2.13
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       15872        4764          25400                 2605         
=> passed   128   0.00       64512       17796         100104                 9629         
=> passed   256   0.00      260096       68717         397530                35883         
=> passed   512   0.01     1044480      269399        1583278               137948         
=> passed  1024   0.05     4186112     1065026        6316164               541702         
=> passed  2048   0.13    16760832     4231214       25223260              2133449         
=> passed  4096   0.30    67076096    16859163      100794422              8468422         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (100794422 / 25223260) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    FastCollinearPoints.addSegment(FastCollinearPoints.java:21)
    FastCollinearPoints.<init>(FastCollinearPoints.java:85)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 15/31 tests passed!


================================================================

